{
	"$schema": "http://json-schema.org/draft-07/schema",
	"title": "Dimension",
	"type": "object",
	"additionalProperties": false,
	"properties": {
		"type": {
			"description": "The namespaced ID of the dimension type. Can be a preset, or a custom dimension type.",
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"minecraft:overworld",
						"minecraft:overworld_caves",
						"minecraft:the_nether",
						"minecraft:the_end"
					]
				},
				{
					// TODO DIMENSION_TYPE
				}
			]
		},
		"generator": {
			"description": "Generation settings used for that dimension.",
			"allOf": [
				{
					"properties": {
						"type": {
							"description": "The ID of the generator.",
							"type": "string",
							"enum": [
								"minecraft:flat",
								"minecraft:noise",
								"minecraft:debug"
							]
						}
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"const": "minecraft:noise"
							}
						}
					},
					"then": {
						"properties": {
							"seed": {
								"description": "The seed used to generate the dimension. In most cases, this is exactly the same as the world seed, but can be different and the dimension generated is based upon this seed and not the world seed.",
								"type": "integer"
							},
							"settings": {
								"description": "The noise settings used in the terrain generator. Can be set to a string to use a preset defined in the worldgen/noise_settings folder with a list of customized options.",
								"anyOf": [
									{
										"$ref": "../noiseSetting.json"
									},
									{
										"type": "string"
										// TODO NOISE_SETTINGS_NAME
									}
								]
							},
							"biome_source": {
								"description": "Settings dictating which biomes and biome shapes.",
								"allOf": [
									{
										"properties": {
											"seed": {
												"type": "integer",
												"description": "The seed used for biome generation. In most cases, this is exactly the same as the dimension seed (and by extension the world seed), but can be different and the biome generation for this dimension is based upon this seed and not the dimension seed."
											},
											"biomes": {
												"description": "A list of biome IDs to generate.",
												"type": "array",
												"items": {
													"type": "string" // TODO BIOME_ID
												}
											},
											"type": {
												"type": "string",
												"enum": [
													"minecraft:vanilla_layered",
													"minecraft:fixed",
													"minecraft:checkerboard",
													"minecraft:multi_noise",
													"minecraft:the_end"
												]
											}
										}
									},
									{
										"if": {
											"properties": {
												"type": {
													"const": "minecraft:vanilla_layered"
												}
											}
										},
										"then": {
											"properties": {
												"large_biomes": {
													"description": "Whether the biomes are large. True for biomes generation in the 'Large Biomes' world type.",
													"type": "boolean"
												},
												"legacy_biome_init_layer": {
													"description": "Whether the world was default_1_1.",
													"type": "boolean"
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"type": {
													"const": "minecraft:multi_noise"
												}
											}
										},
										"then": {
											"properties": {
												"preset": {
													"description": "A preset of the set of biomes to be used, mutually exclusive with 'biomes'.",
													"type": "string",
													"const": "minecraft:nether"
												},
												"biomes": {
													"description": "A list of biomes, including their likelihood.",
													"type": "array",
													"items": {
														"description": "A biome and its properties.",
														"additionalProperties": false,
														"properties": {
															"biome": {
																"description": "The biome.",
																"type": "string" // TODO BIOME_IDENTIFIER
															},
															"parameters": {
																"description": "Represent optimal conditions for where the biome should be placed. These values do not affect the generation of terrain within biomes; they affect where the game chooses to place biomes. altitude, weirdness, humidity and temperature are each represented in a distinct contoured map generated by the seed. At any specific point, the biome having parameters most closely resembling the respective parameter on each noise map at that point is chosen. For example, if the point were to have values of -1 temperature, 0.2 humidity, 0.5 altitude and 0 weirdness then birch_forest_hills (-0.1t,0.2h,0.25a,0w) would be chosen over desert (0.5t,-0.5h,0a,0w).",
																"additionalProperties": false,
																"properties": {
																	"altitude": {
																		"description": "Used to place similar biomes near each other.",
																		"minimum": -2,
																		"maximum": 2,
																		"type": "number"
																	},
																	"weirdness": {
																		"description": "",
																		"minimum": -2,
																		"maximum": 2,
																		"type": "number"
																	},
																	"offset": {
																		"description": "Similar to the other parameters but offset is 0 everywhere, thus setting this parameter nearer to 0 gives the biome a greater edge over others, all else being equal.",
																		"minimum": 0,
																		"maximum": 1,
																		"type": "number"
																	},
																	"temperature": {
																		"description": "Used to place similar biomes near each other. This is NOT the same as the temperature value listed on Biome, it does NOT affect rain/snow or the color of leaves and grass.",
																		"minimum": -2,
																		"maximum": 2,
																		"type": "number"
																	},
																	"humidity": {
																		"description": "Used to place similar biomes near each other.",
																		"minimum": -2,
																		"maximum": 2,
																		"type": "number"
																	}
																}
															}
														}
													}
												},
												"altitude_noise": {
													"description": "How the altitude parameter is spread in the world.",
													"additionalProperties": false,
													"properties": {
														"firstOctave": {
															"description": "The lower the value, the smoother the changes in altitude will be, making biomes edges smoother, default value is -7.",
															"type": "integer"
														},
														"amplitudes": {
															"description": "A list of floats, using more values allows for greater precisions, higher absolute values seem to make the altitude reach bigger absolute values, the order of the values seem to wheight them, for example, [4,3,2,1] will generally create greater absolute altitudes than [1,2,3,4], default value is [1, 1].",
															"type": "array",
															"items": {
																"description": "An amplitude.",
																"type": "number"
															}
														}
													}
												},
												"weirdness_noise": {
													"description": "Similar to altitude_noise for the weirdness parameter.",
													"additionalProperties": false,
													"properties": {
														"firstOctave": {
															"type": "integer"
														},
														"amplitudes": {
															"type": "array",
															"items": {
																"type": "number"
															}
														}
													}
												},
												"temperature_noise": {
													"description": "Similar to altitude_noise for the temperature parameter.",
													"additionalProperties": false,
													"properties": {
														"firstOctave": {
															"type": "integer"
														},
														"amplitudes": {
															"type": "array",
															"items": {
																"type": "number"
															}
														}
													}
												},
												"humidity_noise": {
													"description": "Similar to altitude_noise for the humidity parameter.",
													"additionalProperties": false,
													"properties": {
														"firstOctave": {
															"type": "integer"
														},
														"amplitudes": {
															"type": "array",
															"items": {
																"type": "number"
															}
														}
													}
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"type": {
													"const": "minecraft:fixed"
												}
											}
										},
										"then": {
											"properties": {
												"biome": {
													"description": "The single biome to generate.",
													"type": "string" // TODO BIOME_IDENTIFIER
												}
											}
										}
									},
									{
										"if": {
											"properties": {
												"type": {
													"const": "minecraft:checkerboard"
												}
											}
										},
										"then": {
											"properties": {
												"biomes": {
													"description": "A list of biomes that repeat along the diagonals (can be more than 3).",
													"type": "array",
													"items": {
														"type": "string" // TODO BIOME_IDENTIFIER
													}
												},
												"scale": {
													"description": "Determines the size of the squares on an exponential scale.",
													"type": "integer",
													"minimum": 0,
													"maximum": 62
												}
											}
										}
									}
								]
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"const": "minecraft:flat"
							}
						}
					},
					"then": {
						"properties": {
							"settings": {
								"description": "Superflat settings.",
								"additionalProperties": false,
								"properties": {
									"layers": {
										"type": "array",
										"items": {
											"description": "A superflat layer. The first entry is the bottom layer, the last entry is the top layer.",
											"properties": {
												"height": {
													"description": "The number of blocks in the layer.",
													"type": "integer"
												},
												"block": {
													"description": "The block the layer is made of.",
													"type": "string" // TODO BLOCK_IDENTIFIER
												}
											}
										}
									},
									"biome": {
										"description": "The single biome of the world.",
										"type": "string" // TODO BIOME_IDENTIFIER
									},
									"lakes": {
										"description": "Whether or not to generate lakes. If set to true, then water and lava lakes generate often even in biomes where lakes don't normally generate. Lava lakes generate surrounded by different types of stone and ores from the overworld.",
										"type": "boolean"
									},
									"features": {
										"description": "Whether or not to generate biome-specific decorations like trees, grass, flowers, cacti, etc.",
										"type": "boolean"
									},
									"structures": {
										"description": "Structure settings.",
										"additionalProperties": false,
										"properties": {
											"stronghold": {
												"description": "Settings for how strongholds should be spawned. The stronghold values under the structures tag appear to be placeholders so that every namespaced structure has a value; these values are the ones that actually control stronghold spawning.",
												"additionalProperties": false,
												"properties": {
													"distance": {
														"description": "Controls how far apart the strongholds are.",
														"type": "integer"
													},
													"count": {
														"description": "How many strongholds to generate.",
														"type": "integer"
													},
													"spread": {
														"type": "integer"
													}
												}
											},
											"structures": {
												"propertyNames": {
													"examples": [] // TODO VANILLA_STRUCTURE_IDENTIFIERS
												},
												"patternProperties": {
													".*": {
														"description": "The key for this field should be the namespaced ID of a structure. If structures are not listed, it does not generate.",
														"properties": {
															"spacing": {
																"description": "Average distance between two structure placement attempts of this type in chunks.",
																"type": "integer"
															},
															"separation": {
																"description": "Minimum distance between two structures of this type in chunks; must be less than spacing.",
																"type": "integer"
															},
															"salt": {
																"description": "A number that assists in randomization.",
																"type": "integer"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			]
		}
	}
}
